plugins {
    id 'org.springframework.boot' version '2.6.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id 'jacoco'
}

group = 'com.dailyhome'
version = '1.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = '0.8.7'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

bootJar {
    dependsOn asciidoctor
    copy {
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

//    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:rest-assured:4.4.0'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'io.jsonwebtoken:jjwt:0.9.1'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false

        html.destination file("src/jacoco/jacoco.html")
        xml.destination file("src/jacoco/jacoco.xml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '/com/dailyhome/back/*BackApplication*',
                            '/com/dailyhome/back/exception',
                            '/com/dailyhome/back/common',
                            '/com/dailyhome/back/configuration',
                            '/com/dailyhome/back/**/dto',
                    ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }

            excludes = [
                    '/com/dailyhome/back/*BackApplication*',
                    '/com/dailyhome/back/exception',
                    '/com/dailyhome/back/common',
                    '/com/dailyhome/back/configuration',
                    '/com/dailyhome/back/**/dto'
            ]
        }
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn 'asciidoctor'
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}
